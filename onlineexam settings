"""
Django settings for onlinexam project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
TEMPLATE_DIR = os.path.join(BASE_DIR,'templates')
STATIC_DIR=os.path.join(BASE_DIR,'static')
# MEDIA_ROOT=os.path.join(BASE_DIR,'static')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '@k0#p3kidu)yaaa3u1hplxz)f@^6xiy384*(+n@@s5x#1bx@m5'

# SECURITY WARNING: don't run with debug turned on in production!
# Allow overriding via environment variable set by launcher script
def _env_flag(name: str, default: str = '') -> bool:
    return str(os.environ.get(name, default)).strip().lower() in ('1', 'true', 'yes', 'on')

DEBUG = _env_flag('DJANGO_DEBUG', 'false')

# Comma-separated list from env, e.g. "localhost,127.0.0.1,192.168.1.10,MYPC"
_allowed = os.environ.get('DJANGO_ALLOWED_HOSTS')
if _allowed:
    ALLOWED_HOSTS = [h.strip() for h in _allowed.split(',') if h.strip()]
else:
    # Safe defaults; launcher script should set explicitly
    ALLOWED_HOSTS = ['localhost', '127.0.0.1']



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'exam.apps.examConfig',
    'student',
    'widget_tweaks',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    #'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
CSRF_COOKIE_SECURE=False
ROOT_URLCONF = 'onlinexam.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR,],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'onlinexam.wsgi.application'
ASGI_APPLICATION = 'onlinexam.asgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

# Default to SQLite for ease of development; allow switching to PostgreSQL via env.
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#         'OPTIONS': {
#             # Helps avoid transient "database is locked" under small write bursts
#             'timeout': 10,
#         },
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'ksaexamsoft',
        'USER': 'ksaexam',
        'PASSWORD': 'ksaexam#0123',
        'HOST': '127.0.0.1',
        'PORT': '5432',
        'CONN_MAX_AGE': 60,
    }
}

# Opt-in PostgreSQL without breaking local/dev. Set USE_POSTGRES=1 or POSTGRES_HOST env.
USE_POSTGRES = str(os.environ.get('USE_POSTGRES', '')).lower() in ('1', 'true', 'yes')
if USE_POSTGRES or os.environ.get('POSTGRES_HOST'):
    DATABASES['default'] = {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_DB', 'ksaexamsoft'),
        'USER': os.environ.get('POSTGRES_USER', 'ksaexam'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD', ''),
        'HOST': os.environ.get('POSTGRES_HOST', '127.0.0.1'),
        'PORT': os.environ.get('POSTGRES_PORT', '5432'),
        # Keep connections open briefly to reduce reconnect overhead
        'CONN_MAX_AGE': 60,
    }



# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS=[
STATIC_DIR,
 ]

# Static files for production (collected via collectstatic)
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

LOGIN_REDIRECT_URL='/afterlogin'

#for contact us give your gmail id and password
EMAIL_BACKEND ='django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = 'cblake6231415@gmail.com' # this email will be used to send emails
EMAIL_HOST_PASSWORD = 'Cblake#123' # host email password required
# now sign in with your host gmail account in your browser
# open following link and turn it ON
# https://myaccount.google.com/lesssecureapps
# otherwise you will get SMTPAuthenticationError at /contactus
# this process is required because google blocks apps authentication by default
EMAIL_RECEIVING_USER = ['cblake6231415@gmail.com'] # email on which you will receive messages sent from website

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Optional: CSRF trusted origins provided via environment (comma-separated full origins)
_csrf_origins = os.environ.get('DJANGO_CSRF_TRUSTED_ORIGINS')
if _csrf_origins:
    CSRF_TRUSTED_ORIGINS = [o.strip() for o in _csrf_origins.split(',') if o.strip()]

# PDF Processing Configuration
TESSERACT_CMD = r'C:\Program Files\Tesseract-OCR\tesseract.exe'  # Windows default path

# Optional cache directories for Detectron2/Torch
DETECTRON2_CACHE_DIR = os.path.join(BASE_DIR, 'models', 'detectron2')
TORCH_CACHE_DIR = os.path.join(BASE_DIR, 'models', 'torch')

# PDF Processing Configuration
TESSERACT_CMD = r'C:\Program Files\Tesseract-OCR\tesseract.exe'  # Default Windows path
DETECTRON_CACHE_DIR = os.path.join(BASE_DIR, 'detectron_cache')
TORCH_CACHE_DIR = os.path.join(BASE_DIR, 'torch_cache')

# Create cache directories
os.makedirs(DETECTRON_CACHE_DIR, exist_ok=True)
os.makedirs(TORCH_CACHE_DIR, exist_ok=True)
os.makedirs(os.path.join(MEDIA_ROOT, 'staging'), exist_ok=True)
os.makedirs(os.path.join(MEDIA_ROOT, 'questions'), exist_ok=True)


DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
